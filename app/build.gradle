apply plugin: 'com.android.application'
//赋值与引用
def rootAndroidId = rootProject.ext.androidId
def appId = rootProject.ext.appId
def support = rootProject.ext.dependencies
def url = rootProject.ext.url


android {
    compileSdkVersion rootAndroidId.compileSdkVersion
    defaultConfig {
        //app子模块在组件化开发中，默认为application
        applicationId appId.app
        minSdkVersion rootAndroidId.minSdkVersion
        targetSdkVersion rootAndroidId.targetSdkVersion
        versionCode rootAndroidId.versionCode
        versionName rootAndroidId.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        //这个方法接收三个非空的参数，第一个：确定值的类型，第二个，指定key的名字，第三个：传值（必须是String）
        //定义这个的原因是src代码中有可能需要用到跨模块交互，如果是组件化模块显然不行
        //切记：不能在android根节点，只能在defaultConfig或buildTypes节点下。
        buildConfigField("boolean", "isRelease", String.valueOf(isRelease))

        //在gradle文件中配置选项参数（用于APT传参接收）
        //切记：必须写在defaultConfig节点下
        javaCompileOptions {
            annotationProcessorOptions {
                //模块名-APT文件生成的哪个包下面
                arguments = [moduleName: project.getName(), packageNameForAPT: packageNameForAPT]
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    //使用Java8编译
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    testImplementation 'junit:junit:4.12'

    //公共基础库
    implementation project(':common')

    //引入路由注解
    implementation project(':arouter_annotation')
    annotationProcessor project(":arouter_compiler")    //注解处理器

    //最简洁的方式,循环导入config配置的第三方库
    support.each { k, v -> implementation v }
    processor.each{k,v->annotationProcessor v}

    //如果是集成化模式，做发布版本时，各个模块不能独立运行了
    if (isRelease) {
        implementation project(":order")
        implementation project(":personal")
    }

}